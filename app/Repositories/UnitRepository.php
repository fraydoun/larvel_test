<?php


namespace App\Repositories;

use App\Models\Building;
use App\Models\Factor;
use App\Models\Resident;
use App\Models\Unit;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Database\Query\JoinClause;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Prettus\Repository\Eloquent\BaseRepository;


class UnitRepository extends BaseRepository
{

    public function model()
    {
        return Unit::class;
    }


    public function create($attributes):Unit
    {
        $model = parent::create($attributes); // TODO: Change the autogenerated stub

        $code  = Unit::Flag . substr(microtime(), -2) . $model->id;

        $model->code = $code;
        $model->update(['code' => $code]);

        return $model;
    }

    public function findByCode($code){
        return $this->findByField('code', $code)->first();
    }

    /**
     * @param $numberDay integer
     * return units taht reach time to insert record.
     *  if unit not has active resident not set charge for any whare.
     */
    public function reachUnitChargeTime($numberDay){
        return Unit::leftJoin('factor', function($join){
            /** @var JoinClause $join */
            $join->on('factor.item_id', '=', 'unit.id');
            $join->on('factor.item_type', '=', DB::raw(Factor::ITEM_TYPE_UNIT));
        })
            ->leftJoin('resident', 'unit.id', '=', 'resident.unit_id')
            ->where(function($query) use ($numberDay){
                $query->whereDate('factor.created_at', '!=', Carbon::now()->day($numberDay))
                    ->orWhereNull('factor.id');
            })
            ->where('unit.day_charge', $numberDay)
            ->whereNotNull('resident.unit_id')
            ->where('resident.status', Resident::STATUS_ACTIVE)
            ->select('unit.*')
            ->limit(10)
            ->get();

    }

    public function findById($id){
        return $this->findByField('id', $id)->first();
    }

    /**
     * get debt  unit
     * دریافت کل بدهی های یک واحد
     */
    public function debt(Unit $unit, User $user){
        $debt = $unit->relFactors()->where('status', Factor::STATUS_NOT_PAY)
            ->where('owner', $user->id)
            ->sum('price');
        return $debt;
    }




}
